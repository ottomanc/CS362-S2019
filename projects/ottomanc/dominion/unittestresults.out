----------------- Testing Card: adventurer ----------------
TEST 1: add two cards to current player hand
hand count = 8, expected = 6
deck count = 0, expected = 3
coins = 4, expected = 4
TEST 2: check no state changes for other players
player 1 hand count = 0, expected = 0
player 1 deck count = 10, expected = 10
TEST 3: check no change in victory + kingdom card piles
estate count = 8, expected = 8
duchy count = 8, expected = 8
province count = 8, expected = 8

 >>>>> SUCCESS: Testing complete adventurer <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: add two cards to current player hand
hand count = 9, expected = 7
deck count = 0, expected = 2
coins = 4, expected = 4
TEST 2: check no state changes for other players
player 1 hand count = 0, expected = 0
player 1 deck count = 10, expected = 10
TEST 3: check no change in victory + kingdom card piles
estate count = 8, expected = 8
duchy count = 8, expected = 8
province count = 8, expected = 8

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: council_room ----------------
TEST 1: add 4 cards to current player hand
hand count = 8, expected = 8
deck count = 1, expected = 1
coins = 4, expected = 4
TEST 2: add one buy to the current player
Buys count = 2, expected = 2
TEST 3: Other players draw one card form their pile
player 1 hand count = 1, expected = 1
player 1 deck count = 9, expected = 9
TEST 4: check no change in victory + kingdom card piles
estate count = 8, expected = 8
duchy count = 8, expected = 8
province count = 8, expected = 8

 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: village ----------------
TEST 1: add 1 cards to current player hand
hand count = 5, expected = 5
deck count = 4, expected = 4
coins = 4, expected = 4
TEST 2: add two actions to the current player
Actions count = 1, expected = 3
TEST 3: check no state changes for other players
player 1 hand count = 0, expected = 0
player 1 deck count = 10, expected = 10
TEST 4: check no change in victory + kingdom card piles
estate count = 8, expected = 8
duchy count = 8, expected = 8
province count = 8, expected = 8

 >>>>> SUCCESS: Testing complete village <<<<<

File 'dominion.c'
Lines executed:47.48% of 556
Branches executed:54.22% of 415
Taken at least once:36.63% of 415
Calls executed:37.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:59
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2738 returned 100% blocks executed 100%
     2738:    8:int compare(const void* a, const void* b) {
     2738:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      479:   10:    return 1;
     2259:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      619:   12:    return -1;
     1640:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 59 returned 100% blocks executed 88%
       59:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       59:   44:  SelectStream(1);
call    0 returned 100%
       59:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       59:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       59:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      649:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     6490:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     5900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       59:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       59:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       59:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       59:   89:      state->supplyCount[estate] = 8;
       59:   90:      state->supplyCount[duchy] = 8;
       59:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       59:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       59:  102:  state->supplyCount[silver] = 40;
       59:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1239:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     9735:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     9145:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      590:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      588:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      590:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     8555:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      177:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      118:  140:      state->deckCount[i] = 0;
      472:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      354:  143:	  state->deck[i][j] = estate;
      354:  144:	  state->deckCount[i]++;
        -:  145:	}
      944:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      826:  148:	  state->deck[i][j] = copper;
      826:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      177:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      118:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      177:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      118:  166:      state->handCount[i] = 0;
      118:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1652:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     1593:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       59:  182:  state->outpostPlayed = 0;
       59:  183:  state->phase = 0;
       59:  184:  state->numActions = 1;
       59:  185:  state->numBuys = 1;
       59:  186:  state->playedCardCount = 0;
       59:  187:  state->whoseTurn = 0;
       59:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      354:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      295:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       59:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       59:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 380 returned 100% blocks executed 100%
      380:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      380:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      380:  209:  if (state->deckCount[player] < 1)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
      236:  210:    return -1;
      144:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1827:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1539:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1539:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1539:  217:    newDeckPos++;
     5783:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
     4244:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1539:  221:    state->deckCount[player]--;
        -:  222:  }
     1683:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     1539:  224:    state->deck[player][i] = newDeck[i];
     1539:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      144:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 95 returned 100% blocks executed 80%
       95:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       95:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       95:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       95:  243:  if ( state->numActions < 1 )
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
        -:  244:    {
       84:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       11:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
       11:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       11:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       11:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       11:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
       11:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 59 returned 100% blocks executed 79%
       59:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       59:  280:  who = state->whoseTurn;
        -:  281:
       59:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       59:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       59:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       59:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       59:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
       59:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       59:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       59:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 475 returned 100% blocks executed 100%
      475:  311:int numHandCards(struct gameState *state) {
      475:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 911 returned 100% blocks executed 100%
      911:  315:int handCard(int handPos, struct gameState *state) {
      911:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      911:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 118 returned 100% blocks executed 100%
      118:  320:int supplyCount(int card, struct gameState *state) {
      118:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1707 returned 100% blocks executed 100%
     1707:  346:int whoseTurn(struct gameState *state) {
     1707:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 59 returned 100% blocks executed 100%
       59:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       59:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
      409:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
      350:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      350:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       59:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       59:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       30:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       29:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       59:  370:  state->outpostPlayed = 0;
       59:  371:  state->phase = 0;
       59:  372:  state->numActions = 1;
       59:  373:  state->coins = 0;
       59:  374:  state->numBuys = 1;
       59:  375:  state->playedCardCount = 0;
       59:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      354:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      295:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       59:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       59:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 61 returned 100% blocks executed 82%
       61:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       61:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       59:  401:  j = 0;
     1534:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     1475:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
       59:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       59:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 4 returned 100% blocks executed 72%
        4:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        4:  420:  int score = 0;
        -:  421:  //score from hand
       14:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  423:    {
       10:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       10:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       10:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       10:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
       10:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       10:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       74:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  434:    {
       70:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       70:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       70:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       70:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       70:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       70:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       74:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  445:    {
       70:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       70:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       70:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       70:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       70:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       70:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
        4:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1558 returned 100% blocks executed 100%
     1558:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1558:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      522:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      359:  534:      state->deck[player][i] = state->discard[player][i];
      359:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      163:  538:    state->deckCount[player] = state->discardCount[player];
      163:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      163:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      163:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      163:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      163:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      163:  559:    if (deckCounter == 0)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
      137:  560:      return -1;
        -:  561:
       26:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       26:  563:    state->deckCount[player]--;
       26:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1395:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1395:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1395:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1395:  576:    state->deckCount[player]--;
     1395:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1421:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 118 returned 100% blocks executed 23%
      118:  583:int getCost(int cardNumber)
        -:  584:{
      118:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 27%
branch  4 taken 0%
branch  5 taken 47%
branch  6 taken 12%
branch  7 taken 7%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 7%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       56:  598:      return 3;
        -:  599:    case gold:
       14:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://Adventurer implementation
function adventurerEffect called 56 returned 100% blocks executed 100%
       56:  647:int adventurerEffect(struct gameState *state, int drawntreasure, int currentPlayer)
        -:  648:{
        -:  649:  int cardDrawn;
        -:  650:  int temphand[MAX_HAND];
       56:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:
      510:  653:  while(drawntreasure<5){
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
      398:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       99:  655:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  656:    }
      398:  657:    drawCard(currentPlayer, state);
call    0 returned 100%
      398:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      398:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
branch  2 taken 87% (fallthrough)
branch  3 taken 13%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      280:  660:      drawntreasure++;
        -:  661:    else{
      118:  662:      temphand[z]=cardDrawn;
      118:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      118:  664:      z++;
        -:  665:    }
        -:  666:  }
      230:  667:  while(z-1>=0){
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
      118:  668:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      118:  669:	  z=z-1;
        -:  670:  }
       56:  671:  return 0;
        -:  672:}
        -:  673:
        -:  674://Council_Room implementation
function council_roomEffect called 52 returned 100% blocks executed 100%
       52:  675:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  676:{
        -:  677:  int i;
        -:  678:
        -:  679:  //+4 Cards
      260:  680:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  681:	{
      208:  682:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:			
        -:  685:  //+1 Buy
       52:  686:  state->numBuys++;
        -:  687:			
        -:  688:  //Each other player draws a card
      156:  689:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  690:	{
      104:  691:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  692:	    {
       52:  693:	      drawCard(i, state);
call    0 returned 100%
        -:  694:	    }
        -:  695:	}
        -:  696:			
        -:  697:  //put played card in played card pile
       52:  698:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  699:			
       52:  700:  return 0;
        -:  701:}
        -:  702:
        -:  703://Smithy implementation
function smithyEffect called 43 returned 100% blocks executed 100%
       43:  704:int smithyEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  705:{
        -:  706:  int i;
        -:  707:
        -:  708:  //+3 Cards
      172:  709:  for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  710:	{
      129:  711:	  drawCard(currentPlayer, state);
call    0 returned 100%
      129:  712:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  713:	}
        -:  714:			
        -:  715:  //discard card from hand
       43:  716:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       43:  717:  return 0;
        -:  718:}
        -:  719:
        -:  720://Village implementation
function villageEffect called 52 returned 100% blocks executed 100%
       52:  721:int villageEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  722:{
        -:  723:  //+1 Card
       52:  724:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  725:			
        -:  726:  //discard played card from hand
       52:  727:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       52:  728:  return 0;
        -:  729:}
        -:  730:
        -:  731://Minion implementation
function minionEffect called 0 returned 0% blocks executed 0%
    #####:  732:int minionEffect(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -:  733:{
        -:  734:  int i;
        -:  735:  //int j;
        -:  736:  //+1 action
    #####:  737:  state->numActions++;
        -:  738:			
        -:  739:  //discard card from hand
    #####:  740:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  741:			
    #####:  742:  if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  743:	{
    #####:  744:	  state->coins = state->coins + 2;
        -:  745:	}
        -:  746:			
    #####:  747:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  748:	{
        -:  749:	  //discard hand
    #####:  750:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  751:	    {
    #####:  752:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  753:	    }
        -:  754:				
        -:  755:	  //draw 4
    #####:  756:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  757:	    {
    #####:  758:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  759:	    }
        -:  760:				
        -:  761:	  //other players discard hand and redraw if hand size > 4
    #####:  762:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  765:		{
    #####:  766:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  767:		    {
        -:  768:		      //discard hand
    #####:  769:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  770:			{
    #####:  771:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  772:			}
        -:  773:
        -:  774:		    }
        -:  775:		}
        -:  776:	    }
        -:  777:				
        -:  778:	}
    #####:  779:  return 0;
        -:  780:}
        -:  781:
function cardEffect called 203 returned 100% blocks executed 5%
      203:  782:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  783:{
        -:  784:  int i;
        -:  785:  int j;
        -:  786:  int k;
        -:  787:  int x;
        -:  788:  int index;
      203:  789:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      203:  790:  int nextPlayer = currentPlayer + 1;
        -:  791:
      203:  792:  int tributeRevealedCards[2] = {-1, -1};
        -:  793:  int temphand[MAX_HAND];// moved above the if statement
      203:  794:  int drawntreasure=0;
        -:  795:  //int cardDrawn;
        -:  796:  //int z = 0;// this is the counter for the temp hand
      203:  797:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        7:  798:    nextPlayer = 0;
        -:  799:  }
        -:  800:
        -:  801:	
        -:  802:  //uses switch to select card and perform actions
      203:  803:  switch( card ) 
branch  0 taken 28%
branch  1 taken 26%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 21%
branch  7 taken 26%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  804:    {
        -:  805:    case adventurer:
       56:  806:      return adventurerEffect(state, drawntreasure, currentPlayer);
call    0 returned 100%
        -:  807:			
        -:  808:    case council_room:
       52:  809:      return council_roomEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  810:			
        -:  811:    case feast:
        -:  812:      //gain card with cost up to 5
        -:  813:      //Backup hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  815:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  816:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  817:      }
        -:  818:      //Backup hand
        -:  819:
        -:  820:      //Update Coins for Buy
    #####:  821:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  822:      x = 1;//Condition to loop on
    #####:  823:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  824:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  825:	  if (DEBUG)
        -:  826:	    printf("None of that card left, sorry!\n");
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  830:	  }
        -:  831:	}
    #####:  832:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  834:
        -:  835:	  if (DEBUG){
        -:  836:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  837:	  }
        -:  838:	}
        -:  839:	else{
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
    #####:  845:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  846:	  x = 0;//No more buying cards
        -:  847:
        -:  848:	  if (DEBUG){
        -:  849:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  850:	  }
        -:  851:
        -:  852:	}
        -:  853:      }     
        -:  854:
        -:  855:      //Reset Hand
    #####:  856:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  857:	state->hand[currentPlayer][i] = temphand[i];
    #####:  858:	temphand[i] = -1;
        -:  859:      }
        -:  860:      //Reset Hand
        -:  861:      			
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case gardens:
    #####:  865:      return -1;
        -:  866:			
        -:  867:    case mine:
    #####:  868:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:	{
    #####:  872:	  return -1;
        -:  873:	}
        -:  874:		
    #####:  875:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  876:	{
    #####:  877:	  return -1;
        -:  878:	}
        -:  879:
    #####:  880:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  return -1;
        -:  883:	}
        -:  884:
    #####:  885:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  886:
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  889:
        -:  890:      //discard trashed card
    #####:  891:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  892:	{
    #####:  893:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  896:	      break;
        -:  897:	    }
        -:  898:	}
        -:  899:			
    #####:  900:      return 0;
        -:  901:			
        -:  902:    case remodel:
    #####:  903:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:
    #####:  905:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  906:	{
    #####:  907:	  return -1;
        -:  908:	}
        -:  909:
    #####:  910:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  911:
        -:  912:      //discard card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
        -:  915:      //discard trashed card
    #####:  916:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  917:	{
    #####:  918:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  919:	    {
    #####:  920:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  921:	      break;
        -:  922:	    }
        -:  923:	}
        -:  924:
        -:  925:
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case smithy:
       43:  929:      return smithyEffect(state,currentPlayer, handPos);
call    0 returned 100%
        -:  930:		
        -:  931:    case village:
       52:  932:      return villageEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  933:		
        -:  934:    case baron:
    #####:  935:      state->numBuys++;//Increase buys by 1!
    #####:  936:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:	int p = 0;//Iterator for hand!
    #####:  938:	int card_not_discarded = 1;//Flag for discard set!
    #####:  939:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:	    state->discardCount[currentPlayer]++;
    #####:  944:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:	    }
    #####:  947:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:	    state->handCount[currentPlayer]--;
    #####:  949:	    card_not_discarded = 0;//Exit the loop
        -:  950:	  }
    #####:  951:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  952:	    if(DEBUG) {
        -:  953:	      printf("No estate cards in your hand, invalid choice\n");
        -:  954:	      printf("Must gain an estate if there are any\n");
        -:  955:	    }
    #####:  956:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:	      state->supplyCount[estate]--;//Decrement estates
    #####:  959:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:		isGameOver(state);
call    0 never executed
        -:  961:	      }
        -:  962:	    }
    #####:  963:	    card_not_discarded = 0;//Exit the loop
        -:  964:	  }
        -:  965:			    
        -:  966:	  else{
    #####:  967:	    p++;//Next card
        -:  968:	  }
        -:  969:	}
        -:  970:      }
        -:  971:			    
        -:  972:      else{
    #####:  973:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  976:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:	    isGameOver(state);
call    0 never executed
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:	    
        -:  982:      
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case great_hall:
        -:  986:      //+1 Card
    #####:  987:      drawCard(currentPlayer, state);
call    0 never executed
        -:  988:			
        -:  989:      //+1 Actions
    #####:  990:      state->numActions++;
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case minion:
    #####:  997:      return minionEffect(state, currentPlayer, handPos, choice1, choice2);
call    0 never executed
        -:  998:
        -:  999:    case steward:
    #####: 1000:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1001:	{
        -: 1002:	  //+2 cards
    #####: 1003:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1004:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1005:	}
    #####: 1006:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
        -: 1008:	  //+2 coins
    #####: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:      else
        -: 1012:	{
        -: 1013:	  //trash 2 cards in hand
    #####: 1014:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1015:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1016:	}
        -: 1017:			
        -: 1018:      //discard card from hand
    #####: 1019:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1020:      return 0;
        -: 1021:		
        -: 1022:    case tribute:
    #####: 1023:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1024:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1025:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	  state->deckCount[nextPlayer]--;
        -: 1027:	}
    #####: 1028:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1030:	  state->discardCount[nextPlayer]--;
        -: 1031:	}
        -: 1032:	else{
        -: 1033:	  //No Card to Reveal
        -: 1034:	  if (DEBUG){
        -: 1035:	    printf("No cards to reveal\n");
        -: 1036:	  }
        -: 1037:	}
        -: 1038:      }
        -: 1039:	    
        -: 1040:      else{
    #####: 1041:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1042:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1043:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1044:	    state->deckCount[nextPlayer]++;
    #####: 1045:	    state->discard[nextPlayer][i] = -1;
    #####: 1046:	    state->discardCount[nextPlayer]--;
        -: 1047:	  }
        -: 1048:			    
    #####: 1049:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1050:	} 
    #####: 1051:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
    #####: 1054:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:	state->deckCount[nextPlayer]--;
        -: 1057:      }    
        -: 1058:		       
    #####: 1059:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1060:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1061:	state->playedCardCount++;
    #####: 1062:	tributeRevealedCards[1] = -1;
        -: 1063:      }
        -: 1064:
    #####: 1065:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1067:	  state->coins += 2;
        -: 1068:	}
        -: 1069:		    
    #####: 1070:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1071:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1072:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1073:	}
        -: 1074:	else{//Action Card
    #####: 1075:	  state->numActions = state->numActions + 2;
        -: 1076:	}
        -: 1077:      }
        -: 1078:	    
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case ambassador:
    #####: 1082:      j = 0;		//used to check if player has enough cards to discard
        -: 1083:
    #####: 1084:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1085:	{
    #####: 1086:	  return -1;				
        -: 1087:	}
        -: 1088:
    #####: 1089:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
    #####: 1091:	  return -1;
        -: 1092:	}
        -: 1093:
    #####: 1094:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:	{
    #####: 1096:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1097:	    {
    #####: 1098:	      j++;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  return -1;				
        -: 1104:	}
        -: 1105:
        -: 1106:      if (DEBUG) 
        -: 1107:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1108:
        -: 1109:      //increase supply count for choosen card by amount being discarded
    #####: 1110:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1111:			
        -: 1112:      //each other player gains a copy of revealed card
    #####: 1113:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
    #####: 1115:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1116:	    {
    #####: 1117:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1118:	    }
        -: 1119:	}
        -: 1120:
        -: 1121:      //discard played card from hand
    #####: 1122:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1123:
        -: 1124:      //trash copies of cards returned to supply
    #####: 1125:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1126:	{
    #####: 1127:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1128:	    {
    #####: 1129:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1130:		{
    #####: 1131:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1132:		  break;
        -: 1133:		}
        -: 1134:	    }
        -: 1135:	}			
        -: 1136:
    #####: 1137:      return 0;
        -: 1138:		
        -: 1139:    case cutpurse:
        -: 1140:
    #####: 1141:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1142:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1145:	    {
    #####: 1146:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1147:		{
    #####: 1148:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1149:		    {
    #####: 1150:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1151:		      break;
        -: 1152:		    }
    #####: 1153:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1154:		    {
    #####: 1155:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1156:			{
        -: 1157:			  if (DEBUG)
        -: 1158:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1159:			}	
    #####: 1160:		      break;
        -: 1161:		    }		
        -: 1162:		}
        -: 1163:					
        -: 1164:	    }
        -: 1165:				
        -: 1166:	}				
        -: 1167:
        -: 1168:      //discard played card from hand
    #####: 1169:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1170:
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:		
        -: 1174:    case embargo: 
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:			
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:			
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:			
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case outpost:
        -: 1192:      //set outpost flag
    #####: 1193:      state->outpostPlayed++;
        -: 1194:			
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:			
    #####: 1203:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1209:	}
        -: 1210:			
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:	}
        -: 1222:      }
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case treasure_map:
        -: 1226:      //search hand for another treasure_map
    #####: 1227:      index = -1;
    #####: 1228:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1229:	{
    #####: 1230:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1231:	    {
    #####: 1232:	      index = i;
    #####: 1233:	      break;
        -: 1234:	    }
        -: 1235:	}
    #####: 1236:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
        -: 1238:	  //trash both treasure cards
    #####: 1239:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1240:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1241:
        -: 1242:	  //gain 4 Gold cards
    #####: 1243:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1244:	    {
    #####: 1245:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1246:	    }
        -: 1247:				
        -: 1248:	  //return success
    #####: 1249:	  return 1;
        -: 1250:	}
        -: 1251:			
        -: 1252:      //no second treasure_map found in hand
    #####: 1253:      return -1;
        -: 1254:    }
        -: 1255:	
    #####: 1256:  return -1;
        -: 1257:}
        -: 1258:
function discardCard called 161 returned 100% blocks executed 100%
      161: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:	
        -: 1262:  //if card is not trashed, added to Played pile 
      161: 1263:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1264:    {
        -: 1265:      //add card to played pile
      161: 1266:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      161: 1267:      state->playedCardCount++;
        -: 1268:    }
        -: 1269:	
        -: 1270:  //set played card to -1
      161: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:	
        -: 1273:  //remove card from player's hand
      161: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
        4: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
      157: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
        1: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:  else 	
        -: 1285:    {
        -: 1286:      //replace discarded card with last card in hand
      156: 1287:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
      156: 1289:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
      156: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:	
      161: 1294:  return 0;
        -: 1295:}
        -: 1296:
function gainCard called 59 returned 100% blocks executed 70%
       59: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:	
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
       59: 1302:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1303:    {
    #####: 1304:      return -1;
        -: 1305:    }
        -: 1306:	
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
       59: 1312:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1313:    {
    #####: 1314:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:      state->deckCount[player]++;
        -: 1316:    }
       59: 1317:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1318:    {
    #####: 1319:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1320:      state->handCount[player]++;
        -: 1321:    }
        -: 1322:  else
        -: 1323:    {
       59: 1324:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       59: 1325:      state->discardCount[player]++;
        -: 1326:    }
        -: 1327:	
        -: 1328:  //decrease number in supply pile
       59: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:	 
       59: 1331:  return 0;
        -: 1332:}
        -: 1333:
function updateCoins called 129 returned 100% blocks executed 100%
      129: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:	
        -: 1338:  //reset coin count
      129: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
      829: 1342:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1343:    {
      700: 1344:      if (state->hand[player][i] == copper)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1345:	{
      429: 1346:	  state->coins += 1;
        -: 1347:	}
      271: 1348:      else if (state->hand[player][i] == silver)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 1349:	{
       87: 1350:	  state->coins += 2;
        -: 1351:	}
      184: 1352:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1353:	{
        8: 1354:	  state->coins += 3;
        -: 1355:	}	
        -: 1356:    }	
        -: 1357:
        -: 1358:  //add bonus
      129: 1359:  state->coins += bonus;
        -: 1360:
      129: 1361:  return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
        -: 1366:
